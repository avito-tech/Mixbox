require_relative '../cocoapods/lock_patcher'
require_relative '../cocoapods/repo'

ENV["MIXBOX_SET_VERSION_TO_001"] = "true"

project 'Tests.xcodeproj'
workspace 'Tests.xcworkspace'

use_frameworks!
inhibit_all_warnings!

mixbox = Devpods::Repo.new(
    'ssh://git@github.com:avito-tech/Mixbox.git',
    lambda { |name, hash|
      local_hash = hash.clone
      local_hash[:inhibit_warnings] = false
      local_hash[:configurations] = ['Debug']
      pod name, local_hash
    }
)
mixbox.local_path_value = '..'

sourcery = Devpods::Repo.new(
    'https://github.com/avito-tech/Sourcery.git',
    lambda { |name, hash|
      local_hash = hash.clone
      local_hash[:inhibit_warnings] = false
      local_hash[:configurations] = ['Debug']
      pod name, local_hash
    }
)
sourcery.commit_value = '0564feccdc8fade6c68376bdf7f8dab9b79863fe'
sourcery.branch_value = 'avito'
sourcery.local_path_env = 'MIXBOX_SOURCERY_LOCAL_PATH'

def tests_ipc_pods
  pod 'TestsIpc', :path => 'Frameworks/TestsIpc'
end

def execute_shell_or_raise(shell_command)
   system(shell_command) or raise "Shell command failed: #{shell_command}"
end
 
### TARGETS

target 'TestedApp' do
  platform :ios, '9.0'
  
  mixbox.pod 'MixboxInAppServices'

  tests_ipc_pods
end

target 'FakeSettingsApp' do
  platform :ios, '9.0'
  
  mixbox.pod 'MixboxFakeSettingsAppMain'
end

target 'GrayBoxUiTests' do
  platform :ios, '9.0'
  
  # Code being tested:
  mixbox.pod 'MixboxGray'
  mixbox.pod 'MixboxTestsFoundation'
  mixbox.pod 'AutomationInfrastructureIntegrationTests'
  
  # Helpers:
  mixbox.pod 'MixboxStubbing'
  mixbox.pod 'MixboxMocksRuntime'
  
  tests_ipc_pods
end

target 'BlackBoxUiTests' do
  platform :ios, '9.0'
  
  # Code being tested:
  mixbox.pod 'MixboxBlack'
  mixbox.pod 'MixboxTestsFoundation'
  mixbox.pod 'AutomationInfrastructureIntegrationTests'
  
  # Helpers:
  mixbox.pod 'MixboxMocksRuntime'
  mixbox.pod 'MixboxStubbing'

  tests_ipc_pods
end
  
target 'UnitTests' do
  platform :ios, '9.0'
  
  mixbox.pod_all_ios
  mixbox.pod 'MixboxTestsFoundation'
  mixbox.pod 'AutomationInfrastructureIntegrationTests'
  
  tests_ipc_pods # A kludge to access Singletons unrelated to IPC from TestsIpc (nice!).
end

target 'OsxUnitTests' do
  platform :osx, '10.14'

  sourcery.pod 'SourceryFramework'
  sourcery.pod 'SourceryRuntime'
  mixbox.pod_all_osx
end

target 'HostedAppLogicTests' do
  platform :ios, '9.0'
  
  mixbox.pod_all_ios
  mixbox.pod 'MixboxTestsFoundation'
  mixbox.pod 'AutomationInfrastructureIntegrationTests'
  
  tests_ipc_pods # A kludge to access Singletons unrelated to IPC from TestsIpc (nice!).
end

target 'Lint' do
  platform :ios, '9.0'
  
  pod 'SwiftLint', '0.36.0', :inhibit_warnings => true # TODO: Update.
end

pre_install do |installer|
  # Xcode with new build system requires all files to be added to ".xcodeproj" before
  # building the project (even if source files are generated before being compiled).
  # So this will create files (and also generate proper code)
  execute_shell_or_raise("'#{__dir__}/Scripts/warm_up_code_generation'")
  execute_shell_or_raise("'#{__dir__}/GrayBoxUiTests/Mocks/generate_mocks'")
  execute_shell_or_raise("'#{__dir__}/UnitTests/Mocks/generate_mocks'")
end

post_install do |installer|
  installer.pods_project.targets.each do |target|
    target.build_configurations.each do |config|
      if target.name != 'MixboxMocksGeneration'
        if config.name == 'Debug'
          config.build_settings['ENABLE_BITCODE'] = 'NO' # To support testing on devices
          config.build_settings['ENABLE_TESTABILITY'] = 'YES' # To support @testable import
          config.build_settings['OTHER_SWIFT_FLAGS'] ||= ['$(inherited)', '-D', 'MIXBOX_ENABLE_IN_APP_SERVICES', '-Onone']
          config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= ['$(inherited)', 'MIXBOX_ENABLE_IN_APP_SERVICES=1']
        end
      end
    end
    
    remove_default_imports_from_target(target)
  end

  patch_to_be_able_to_run_executable(installer)
end

def patch_to_be_able_to_run_executable(installer)
  project = Xcodeproj::Project.open('Tests.xcodeproj')
  
  project.native_targets.each do |native_target|
    if native_target.name == 'MocksGenerator'
      native_target.build_configurations.each do |config|
        config.build_settings['LD_RUNPATH_SEARCH_PATHS'] = '$(inherited) @executable_path/../Frameworks @loader_path/Frameworks'
        
        installer.pods_project.targets.each do |pod_target|
          # For each pod, add the framework path to LD_RUNPATH_SEARCH_PATHS
          framework_name = pod_target.name
          search_path = "@executable_path/#{framework_name}/"
          config.build_settings['LD_RUNPATH_SEARCH_PATHS'] = config.build_settings['LD_RUNPATH_SEARCH_PATHS'] + " #{search_path}"
        end
      end
    end
  end
  
  project.save
end

def remove_default_imports_from_target(target)
    # It doesn't work for MixboxBlack & MixboxTestsFoundation targets. Errors are like `Unknown type name 'XCEventGenerator'`
  if ['MixboxBlack', 'MixboxTestsFoundation'].include?(target.name)
    return
  end
  
  dir = "#{__dir__}/Pods/Target Support Files/#{target.name}"
  
  remove_default_imports_from_file("#{dir}/#{target.name}-umbrella.h")
  remove_default_imports_from_file("#{dir}/#{target.name}-prefix.pch")
end

def remove_default_imports_from_file(file_path)
  if File.file?(file_path)
    text = File.read(file_path)
    
    new_defines = '#ifndef MIXBOX_EXPORT
#if defined(__cplusplus)
#define MIXBOX_EXPORT extern "C"
#else
#define MIXBOX_EXPORT extern
#endif
#endif'

    # iOS
    text = text.gsub(old_defines('UIKit'), new_defines)
    # OSX
    text = text.gsub(old_defines('Cocoa'), new_defines)
    text = text.gsub('FOUNDATION_EXPORT', 'MIXBOX_EXPORT')

    File.open(file_path, "w") { |file| file.puts text }
  end
end

def old_defines(framework)
  "#ifdef __OBJC__
#import <#{framework}/#{framework}.h>
#else
#ifndef FOUNDATION_EXPORT
#if defined(__cplusplus)
#define FOUNDATION_EXPORT extern \"C\"
#else
#define FOUNDATION_EXPORT extern
#endif
#endif
#endif"
end
