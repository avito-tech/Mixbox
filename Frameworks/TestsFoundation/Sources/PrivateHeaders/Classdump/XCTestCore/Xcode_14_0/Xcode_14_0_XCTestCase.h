#if __IPHONE_OS_VERSION_MAX_ALLOWED >= 160000 && __IPHONE_OS_VERSION_MAX_ALLOWED < 170000

#import "Xcode_14_0_XCTestCore_CDStructures.h"
#import "Xcode_14_0_SharedHeader.h"
#import "Xcode_14_0_XCTestCaseDiscoveryUIAutomationDelegate.h"
#import "Xcode_14_0_XCTestCaseUIAutomationDelegate.h"
#import "Xcode_14_0_XCTestCastMethodNamesUIAutomationDelegate.h"
#import <XCTest/XCTActivity.h>
#import <XCTest/XCTWaiter.h>
#import <XCTest/XCTest.h>
#import <XCTest/XCTestCase.h>

@class Bool, MXMInstrument, XCTAttachmentManager, XCTIssue, XCTMetricDiagnosticHelper, XCTSkippedTestContext, XCTTestIdentifier, XCTWaiter, XCTestCaseRun;

//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

@interface XCTestCase ()
{
    _Bool _continueAfterFailure;
    _Bool __preciseTimeoutsEnabled;
    _Bool _isMeasuringMetrics;
    _Bool __didMeasureMetrics;
    _Bool __didStartMeasuring;
    _Bool __didStopMeasuring;
    _Bool __memgraphCollectionIteration;
    _Bool _hasDequeuedTeardownBlocks;
    _Bool _hasReportedFailuresToTestCaseRun;
    _Bool _canHandleInterruptions;
    _Bool _shouldHaltWhenReceivesControl;
    _Bool _shouldSetShouldHaltWhenReceivesControl;
    _Bool _hasAttemptedToCaptureScreenshotOnFailure;
    XCTTestIdentifier *_identifier;
    NSInvocation *_invocation;
    double _executionTimeAllowance;
    NSDictionary *_activityAggregateStatistics;
    NSMutableArray *_mutableExpectations;
    NSArray *_activePerformanceMetricIDs;
    unsigned long long _startWallClockTime;
    struct time_value _startUserTime;
    struct time_value _startSystemTime;
    unsigned long long _measuringIteration;
    MXMInstrument *_instrument;
    XCTMetricDiagnosticHelper *_diagnosticHelper;
    long long _runLoopNestingCount;
    NSMutableArray *_teardownBlocks;
    NSMutableArray *_primaryThreadBlocks;
    XCTAttachmentManager *_attachmentManager;
    NSObject<OS_dispatch_source> *_timeoutSource;
    unsigned long long _signpostID;
    NSThread *_primaryThread;
    NSMutableSet *_previousIssuesAssociatedWithSwiftErrors;
    NSMutableArray *_enqueuedIssues;
    XCTWaiter *_currentWaiter;
    XCTSkippedTestContext *_skippedTestContext;
    XCTestCaseRun *_testCaseRun;
    NSMutableDictionary *__perfMetricsForID;
    NSDictionary *_testRunConfiguration;
}

+ (CDStruct_2ec95fd7)minimumOperatingSystemVersion;
+ (_Bool)_isAvailable;
+ (_Bool)_reportPerformanceFailuresForLargeImprovements;
+ (id)_testInvocationDescriptors;
+ (_Bool)isInheritingTestCases;
+ (id)_languageSpecificTestMethodNameForSelectorString:(id)arg1;

+ (SEL)_resolvedTestMethodSelectorForSelector:(SEL)arg1;
+ (id)testRunConfigurationInputs;
+ (_Bool)_isDiscoverable;
+ (id)_identifierForSelectorString:(id)arg1;

+ (id)_variationOptions;
+ (id)allTestMethodInvocations;
+ (id)_allTestMethodInvocationDescriptors;
+ (void)_collectTestInvocationDescriptorsForClassHierarchyIntoDictionary:(id)arg1;
+ (id)testMethodInvocations;
+ (id)_testMethodInvocationDescriptors;
+ (_Bool)isValidTestMethodWithSignature:(id)arg1 convention:(long long *)arg2;
+ (id)allSubclassesOutsideXCTest;
+ (id)allSubclasses;
+ (id)_allSubclasses;
@property(readonly, getter=_testRunConfiguration) NSDictionary *testRunConfiguration; // @synthesize testRunConfiguration=_testRunConfiguration;
@property(retain) NSMutableDictionary *_perfMetricsForID; // @synthesize _perfMetricsForID=__perfMetricsForID;
@property(nonatomic) _Bool hasAttemptedToCaptureScreenshotOnFailure; // @synthesize hasAttemptedToCaptureScreenshotOnFailure=_hasAttemptedToCaptureScreenshotOnFailure;
@property(nonatomic) _Bool shouldSetShouldHaltWhenReceivesControl; // @synthesize shouldSetShouldHaltWhenReceivesControl=_shouldSetShouldHaltWhenReceivesControl;
@property(nonatomic) _Bool shouldHaltWhenReceivesControl; // @synthesize shouldHaltWhenReceivesControl=_shouldHaltWhenReceivesControl;
@property(retain, nonatomic) XCTSkippedTestContext *skippedTestContext; // @synthesize skippedTestContext=_skippedTestContext;
@property(retain) NSThread *primaryThread; // @synthesize primaryThread=_primaryThread;
@property long long runLoopNestingCount; // @synthesize runLoopNestingCount=_runLoopNestingCount;
@property _Bool _didStopMeasuring; // @synthesize _didStopMeasuring=__didStopMeasuring;
@property _Bool _didStartMeasuring; // @synthesize _didStartMeasuring=__didStartMeasuring;
@property _Bool _didMeasureMetrics; // @synthesize _didMeasureMetrics=__didMeasureMetrics;
@property(copy, getter=_activityAggregateStatistics, setter=_setActivityAggregateStatistics:) NSDictionary *activityAggregateStatistics; // @synthesize activityAggregateStatistics=_activityAggregateStatistics;
@property(nonatomic) _Bool _preciseTimeoutsEnabled; // @synthesize _preciseTimeoutsEnabled=__preciseTimeoutsEnabled;
@property(readonly) double _effectiveExecutionTimeAllowance;
- (void)_resetTimer;
- (void)_stopTimeoutTimer;
- (void)_startTimeoutTimer;
- (void)_exceededExecutionTimeAllowance;
@property unsigned long long maxDurationInMinutes;
- (void)_addExpectation:(id)arg1;
- (void)startActivityWithTitle:(id)arg1 block:(CDUnknownBlockType)arg2;
- (void)startActivityWithTitle:(id)arg1 type:(id)arg2 block:(CDUnknownBlockType)arg3;

- (id)baselinesDictionaryForTest;
- (void)_logAndReportPerformanceMetrics:(id)arg1 perfMetricResultsForIDs:(id)arg2 withBaselinesForTest:(id)arg3;
- (void)_logAndReportPerformanceMetrics:(id)arg1 perfMetricResultsForIDs:(id)arg2 withBaselinesForTest:(id)arg3 defaultBaselinesForPerfMetricID:(id)arg4;
- (void)registerMetricID:(id)arg1 name:(id)arg2 unitString:(id)arg3 polarity:(long long)arg4;
- (void)registerMetricID:(id)arg1 name:(id)arg2 unitString:(id)arg3;
- (void)registerMetricID:(id)arg1 name:(id)arg2 unit:(id)arg3;
- (void)reportMetric:(id)arg1 reportFailures:(_Bool)arg2;
- (void)reportMeasurements:(id)arg1 forMetricID:(id)arg2 reportFailures:(_Bool)arg3;
- (void)_recordValues:(id)arg1 forPerformanceMetricID:(id)arg2 name:(id)arg3 unitsOfMeasurement:(id)arg4 baselineName:(id)arg5 baselineAverage:(id)arg6 maxPercentRegression:(id)arg7 maxPercentRelativeStandardDeviation:(id)arg8 maxRegression:(id)arg9 maxStandardDeviation:(id)arg10 file:(id)arg11 line:(unsigned long long)arg12 polarity:(long long)arg13;

@property(readonly) CDStruct_2ec95fd7 minimumOperatingSystemVersion;
- (void)_logMemoryGraphDataFromFilePath:(id)arg1 withTitle:(id)arg2;
- (void)_logMemoryGraphData:(id)arg1 withTitle:(id)arg2;
- (unsigned long long)numberOfTestIterationsForTestWithSelector:(SEL)arg1;
- (id)addAdditionalIterationsBasedOnOptions:(id)arg1;
- (void)afterTestIteration:(unsigned long long)arg1 selector:(SEL)arg2;
- (void)beforeTestIteration:(unsigned long long)arg1 selector:(SEL)arg2;
- (void)tearDownTestWithSelector:(SEL)arg1;
- (void)setUpTestWithSelector:(SEL)arg1;

- (void)_purgeTeardownBlocks;
- (_Bool)_shouldRepeatTest;
- (_Bool)_testMethodSkippedWithXCTSkip;
- (void)conditionallyRelaunchTestRunnerProcess;
- (void)_reportFailuresAtFile:(id)arg1 line:(unsigned long long)arg2 forTestAssertionsInScope:(CDUnknownBlockType)arg3;
- (Class)_requiredTestRunBaseClass;

- (void)dealloc;
- (_Bool)isEqual:(id)arg1;
- (long long)defaultExecutionOrderCompare:(id)arg1;
- (id)nameForLegacyLogging;
- (id)languageAgnosticTestMethodName;
- (id)_xctTestIdentifier;
- (unsigned long long)testCaseCount;

@property(readonly) _Bool shouldRelaunchBeforeRunningTest;
- (id)_duplicate;

- (id)_expectationForDistributedNotification:(id)arg1 object:(id)arg2 handler:(CDUnknownBlockType)arg3;
- (id)_expectationForDarwinNotification:(id)arg1;
- (void)_interruptOrMarkForLaterInterruption;
- (_Bool)_caughtUnhandledDeveloperExceptionPermittingControlFlowInterruptions:(_Bool)arg1 caughtInterruptionException:(_Bool *)arg2 whileExecutingBlock:(CDUnknownBlockType)arg3;
- (_Bool)_caughtUnhandledDeveloperExceptionPermittingControlFlowInterruptions:(_Bool)arg1 whileExecutingBlock:(CDUnknownBlockType)arg2;
- (void)_handleIssue:(id)arg1;
- (void)_dequeueIssues;
- (void)_enqueueIssue:(id)arg1;
- (void)_recordIssue:(id)arg1;
- (_Bool)_isDuplicateOfIssueAssociatedWithSameSwiftError:(id)arg1;
- (void)expectFailureWithContext:(id)arg1;
@property(copy) XCTIssue *candidateIssueForCurrentThread;
- (id)_storageKeyForCandidateIssue;
- (void)handleIssue:(id)arg1;

// Remaining properties

@end

#endif