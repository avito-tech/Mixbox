#if __IPHONE_OS_VERSION_MAX_ALLOWED >= 150000 && __IPHONE_OS_VERSION_MAX_ALLOWED < 160000

#import "Xcode_13_0_XCTAutomationSupport_CDStructures.h"
#import "Xcode_13_0_SharedHeader.h"
#import "Xcode_13_0_XCTConnectionAccepting.h"
#import "Xcode_13_0_XCTElementSnapshotAttributeDataSource.h"
#import "Xcode_13_0_XCTElementSnapshotProvider.h"
#import "Xcode_13_0_XCTMacCatalystStatusProviding.h"
#import "Xcode_13_0_XCTMessagingChannel_RunnerToUIProcess.h"
#import "Xcode_13_0_XCTRemoteApplicationAutomationTarget.h"
#import <Foundation/Foundation.h>

@protocol XCTAccessibilityFramework, XCTElementSnapshotProvider;

@class DTXConnection, DTXProxyChannel, XCTAnimationsIdleNotifier, XCTCapabilities, XCTElementQueryProcessor, XCTMainRunLoopIdleNotifier;

//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

@interface XCTAutomationSession : NSObject <XCTMessagingChannel_RunnerToUIProcess, XCTRemoteApplicationAutomationTarget, XCTElementSnapshotProvider, XCTElementSnapshotAttributeDataSource, XCTMacCatalystStatusProviding, XCTConnectionAccepting>
{
    id <XCTAccessibilityFramework> _accessibilityFramework;
    id <XCTElementSnapshotProvider> _dataSource;
    NSMutableArray *_connections;
    XCTElementQueryProcessor *_queryProcessor;
    NSObject *_queue;
    XCTMainRunLoopIdleNotifier *_runLoopIdleMonitor;
    XCTAnimationsIdleNotifier *_animationIdleNotifier;
    DTXConnection *_dtxConnection;
    DTXProxyChannel *_proxyChannel;
    XCTCapabilities *_remoteInterfaceCapabilities;
}

+ (id)capabilitiesBuilder;
@property(retain) XCTCapabilities *remoteInterfaceCapabilities; // @synthesize remoteInterfaceCapabilities=_remoteInterfaceCapabilities;
@property(readonly) DTXProxyChannel *proxyChannel; // @synthesize proxyChannel=_proxyChannel;
@property(readonly) DTXConnection *dtxConnection; // @synthesize dtxConnection=_dtxConnection;
@property(readonly) XCTAnimationsIdleNotifier *animationIdleNotifier; // @synthesize animationIdleNotifier=_animationIdleNotifier;
@property(readonly) XCTMainRunLoopIdleNotifier *runLoopIdleMonitor; // @synthesize runLoopIdleMonitor=_runLoopIdleMonitor;
@property(readonly) NSObject *queue; // @synthesize queue=_queue;
@property(readonly) XCTElementQueryProcessor *queryProcessor; // @synthesize queryProcessor=_queryProcessor;
@property(readonly) NSMutableArray *connections; // @synthesize connections=_connections;
@property(readonly) __weak id <XCTElementSnapshotProvider> dataSource; // @synthesize dataSource=_dataSource;
@property(readonly) id <XCTAccessibilityFramework> accessibilityFramework; // @synthesize accessibilityFramework=_accessibilityFramework;
- (_Bool)isMacCatalystForPID:(int)arg1;
@property(readonly) _Bool hasBannerNotificationIsStickyAttribute;
@property(readonly) _Bool usePointTransformationsForFrameConversions;
@property(readonly) _Bool supportsHostedViewCoordinateTransformations;
- (id)parameterizedAttribute:(id)arg1 forElement:(id)arg2 parameter:(id)arg3 error:(id *)arg4;
- (id)attributesForElement:(id)arg1 attributes:(id)arg2 error:(id *)arg3;
@property(readonly) _Bool allowsRemoteAccess;
- (id)snapshotForElement:(id)arg1 attributes:(id)arg2 parameters:(id)arg3 timeoutControls:(id)arg4 error:(id *)arg5;
- (id)_XCT_setMallocStackLoggingWithMode:(id)arg1;
- (id)_XCT_notifyWhenAnimationsAreIdle;
- (id)_XCT_notifyWhenMainRunLoopIsIdle;
- (id)_XCT_attributesForElement:(id)arg1 attributes:(id)arg2;
- (id)_XCT_fetchMatchesForQuery:(id)arg1;
- (id)_XCT_exchangeCapabilities:(id)arg1;
- (void)listenForRemoteConnectionViaSerializedTransportWrapper:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)setMallocStackLoggingWithMode:(int)arg1 reply:(CDUnknownBlockType)arg2;
- (void)notifyWhenAnimationsAreIdle:(CDUnknownBlockType)arg1;
- (void)notifyWhenMainRunLoopIsIdle:(CDUnknownBlockType)arg1;
- (id)valuesForPrivilegedAttributes:(id)arg1 forElement:(id)arg2 error:(id *)arg3;
@property(readonly) _Bool providesValuesForPrivilegedAttributes;
- (void)attributesForElement:(id)arg1 attributes:(id)arg2 reply:(CDUnknownBlockType)arg3;
- (void)fetchMatchesForQuery:(id)arg1 reply:(CDUnknownBlockType)arg2;
- (void)exchangeCapabilities:(id)arg1 reply:(CDUnknownBlockType)arg2;
- (void)requestHostAppExecutableNameWithReply:(CDUnknownBlockType)arg1;
- (_Bool)acceptNewConnection:(id)arg1;
- (id)init;
- (id)initWithAccessibilityFramework:(id)arg1;
- (id)initWithAccessibilityFramework:(id)arg1 dataSource:(id)arg2;

// Remaining properties

@end

#endif